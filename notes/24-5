1. create tag model - tag.js
const mongoose = require('mongoose')
const Schema = mongoose.Schema
const tagSchema = new Schema
    name: {
        type: String
    },
    notrd: {
        note: {
            type: Schema.Types.ObjectId,
            ref:'Note'
        }
    }]
})

const Tag=mongoose.model('Tag', tagSchema)
module.exports = tag

2. create tag controller

const express = require('express')
const router = express.Router()
const Tag = require('../models/tag)

router.get('/',(reg,res) => {
    Tag.find()
    .then((tags) => res.json(tags))
})

router.get('/',(reg,res) => {
    const id=req.params.id
    Tag.findById(id).populate('category', ['title', 'body'])
    .then((tag => res.json(tag)))
})

router.post('/',(reg,res) => {
    const body = req.body
    const tag = new Tag(body)
    tag.save()
    .then(tag => res.json(tag))
})
module.exports = router

3. update the route index.js
const tagsRouter = require('./app/controllers/tagsController')
app.use('/tags', tagsRouter)

4. update the notes Schema
category: {
    type:Schema.Types.ObjectId
    ref:'Category'
    required:true
}
tags:[{
    tag:Schema.Types.ObjectId,
    ref:'Note'
}]

5. write mongoose middleware in "note.js" to assign note id to eachh of the tags
mongoose middleware
NoteSchema.post('save',function(next){
    const note = this
    note.tags.forEach(function(tagItem){
        Tag.findById(tagItem.tag)
        .then(tag => {
            tag.notes.push({note:note._id})
            tag.save()
        })
    })
    next()
})

6. in notesController update the show action to populate the tag also
Note.findById(id).populate('category).populate('tags.tag', ['name'])