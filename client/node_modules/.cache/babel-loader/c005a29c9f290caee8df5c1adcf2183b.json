{"ast":null,"code":"var _jsxFileName = \"/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setNotes } from '../../actions/note';\nimport configureStore from '../../store/configureStore';\nconst store = configureStore();\n\nclass NoteList extends React.Component {\n  // constructor(props) {\n  //     super(props)\n  //     this.state = {\n  //         notes: [],\n  //     }\n  //     // this.handlePin=this.handlePin.bind(this)\n  //     // this.handleUnPin = this.handleUnPin.bind(this)\n  //     // this.handleCopy=this.handleCopy.bind(this)\n  //     // this.handleDelete=this.handleDelete.bind(this)\n  // }\n  componentDidMount() {\n    axios.get('http://localhost:3006/notes', {\n      headers: {\n        'x-auth': localStorage.getItem('userAuthToken')\n      }\n    }).then(response => {\n      this.props.dispatch(setNotes(response.data)); // this.setState(() => ({ notes: response.data }))\n    });\n  } // handlePin = (id)  => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //                     const notes = this.state.notes.map(note => {\n  //                         if (note._id === response.data._id) {\n  //                             note.isPinned = response.data.isPinned\n  //                             return note\n  //                         } else {\n  //                             return note\n  //                         }\n  //                     })\n  //                     this.setState(() => ({ notes }))\n  //                 })             \n  // }\n  // handleUnPin = (id) => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //             const notes=this.state.notes.map(note => {\n  //                  if (note._id === response.data._id) {\n  //                     note.isPinned = response.data.isPinned\n  //                     return note\n  //                 }else{\n  //                     return note\n  //                 }\n  //             })\n  //             console.log(notes)\n  //             this.setState(() => ({notes}))\n  //         })\n  // }\n  // handleCopy = (note) => {\n  //     let newNote\n  //     if(note){\n  //         newNote = {\n  //             title:note.title,\n  //             body:note.body,\n  //             category:note.category,\n  //             tags:note.tags.map(tag => ({tag:tag.tag})),\n  //             isPinned:note.isPinned\n  //         }\n  //     }\n  //     axios.post('http://localhost:3006/notes', newNote , {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //     .then(response => {\n  //         console.log(response.data)\n  //         this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n  //     })\n  // }\n  // handleDelete = (id) => {\n  //     axios.delete(`http://localhost:3006/notes/${id}`, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //     .then(response => {\n  //         // const note= this.state.notes.find(noteItem => noteItem._id === id)\n  //         // const index = this.state.notes.indexOf(note)\n  //         // this.state.notes.splice(index,1)\n  //         this.setState((prevState) => ({notes:prevState.notes.filter(note => note._id !== id)}))\n  //     })\n  // }\n\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"notes -\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props.notes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, note.body))))); //     const pinNotes = this.state.notes.filter(note => note.isPinned === true)\n    //     const UnpinNotes = this.state.notes.filter(note => note.isPinned === false)\n    //     return (\n    //         <div>\n    //             {this.state.notes.length !== 0 && (<h1>Listing notes   - {this.state.notes.length}</h1>)}\n    //             {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n    //             <ul>\n    //                 {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n    //                     this.handleDelete(note._id)\n    //                 }}>delete</button><button onClick={() => {\n    //                     this.handleCopy(note)}}>copy</button></li>)}\n    //             </ul>\n    //             {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n    //             <ul>\n    //                 {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n    //                     const confirmRemove = window.confirm('Are you sure?')\n    //                     if(confirmRemove){\n    //                         this.handleDelete(note._id)\n    //                     }\n    //                 }}>delete</button><button onClick={() => {\n    //                     this.handleCopy(note)}}>copy</button></li>)}\n    //             </ul>\n    //             <Link to='/notes/new'>Add Note</Link>\n    //         </div>\n    //     )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notes: state.notes\n  };\n};\n\nexport default connect(mapStateToProps)(NoteList);","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js"],"names":["React","axios","Link","connect","setNotes","configureStore","store","NoteList","Component","componentDidMount","get","headers","localStorage","getItem","then","response","props","dispatch","data","render","console","log","notes","map","note","_id","body","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA,MAAMC,KAAK,GAAGD,cAAc,EAA5B;;AACA,MAAME,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAChBR,IAAAA,KAAK,CAACS,GAAN,CAAU,6BAAV,EAAyC;AACrCC,MAAAA,OAAO,EAAE;AACL,kBAAUC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADL;AAD4B,KAAzC,EAKKC,IALL,CAKUC,QAAQ,IAAI;AACd,WAAKC,KAAL,CAAWC,QAAX,CAAoBb,QAAQ,CAACW,QAAQ,CAACG,IAAV,CAA5B,EADc,CAEd;AACH,KARL;AASH,GArBkC,CAsBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKA,KAAL,CAAWM,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBD,IAAI,CAACE,IAAzB,CAA7B,CADL,CADJ,CADJ,CADJ,CAFK,CAWT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACC;;AArIkC;;AAuIvC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAM;AACFN,IAAAA,KAAK,EAACM,KAAK,CAACN;AADV,GAAN;AAGH,CAJD;;AAKA,eAAenB,OAAO,CAACwB,eAAD,CAAP,CAAyBpB,QAAzB,CAAf","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {setNotes} from '../../actions/note'\nimport configureStore from '../../store/configureStore'\n\nconst store = configureStore()\nclass NoteList extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         notes: [],\n    //     }\n    //     // this.handlePin=this.handlePin.bind(this)\n    //     // this.handleUnPin = this.handleUnPin.bind(this)\n    //     // this.handleCopy=this.handleCopy.bind(this)\n    //     // this.handleDelete=this.handleDelete.bind(this)\n    // }\n    componentDidMount() {\n        axios.get('http://localhost:3006/notes', {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                this.props.dispatch(setNotes(response.data))\n                // this.setState(() => ({ notes: response.data }))\n            })\n    }\n    // handlePin = (id)  => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //                     const notes = this.state.notes.map(note => {\n    //                         if (note._id === response.data._id) {\n    //                             note.isPinned = response.data.isPinned\n    //                             return note\n    //                         } else {\n    //                             return note\n    //                         }\n    //                     })\n    //                     this.setState(() => ({ notes }))\n    //                 })             \n    // }\n    // handleUnPin = (id) => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //             const notes=this.state.notes.map(note => {\n    //                  if (note._id === response.data._id) {\n    //                     note.isPinned = response.data.isPinned\n    //                     return note\n    //                 }else{\n    //                     return note\n    //                 }\n    //             })\n    //             console.log(notes)\n    //             this.setState(() => ({notes}))\n    //         })\n    // }\n\n    // handleCopy = (note) => {\n    //     let newNote\n    //     if(note){\n    //         newNote = {\n    //             title:note.title,\n    //             body:note.body,\n    //             category:note.category,\n    //             tags:note.tags.map(tag => ({tag:tag.tag})),\n    //             isPinned:note.isPinned\n    //         }\n    //     }\n    //     axios.post('http://localhost:3006/notes', newNote , {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //     .then(response => {\n    //         console.log(response.data)\n    //         this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n    //     })\n    // }\n    // handleDelete = (id) => {\n    //     axios.delete(`http://localhost:3006/notes/${id}`, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //     .then(response => {\n    //         // const note= this.state.notes.find(noteItem => noteItem._id === id)\n    //         // const index = this.state.notes.indexOf(note)\n    //         // this.state.notes.splice(index,1)\n    //         this.setState((prevState) => ({notes:prevState.notes.filter(note => note._id !== id)}))\n    //     })\n    // }\n    render() {\n        console.log(this.props)\n        return(\n            <div>\n                <h1>notes -\n                    <ul>\n                        {this.props.notes.map(note => <li key={note._id}>{note.body}</li>)}\n                    </ul>  \n                </h1>\n            </div>\n        )\n    //     const pinNotes = this.state.notes.filter(note => note.isPinned === true)\n    //     const UnpinNotes = this.state.notes.filter(note => note.isPinned === false)\n    //     return (\n    //         <div>\n    //             {this.state.notes.length !== 0 && (<h1>Listing notes   - {this.state.notes.length}</h1>)}\n                \n    //             {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n    //             <ul>\n    //                 {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n    //                     this.handleDelete(note._id)\n    //                 }}>delete</button><button onClick={() => {\n    //                     this.handleCopy(note)}}>copy</button></li>)}\n    //             </ul>\n\n    //             {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n    //             <ul>\n    //                 {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n    //                     const confirmRemove = window.confirm('Are you sure?')\n    //                     if(confirmRemove){\n    //                         this.handleDelete(note._id)\n    //                     }\n    //                 }}>delete</button><button onClick={() => {\n    //                     this.handleCopy(note)}}>copy</button></li>)}\n    //             </ul>\n                \n    //             <Link to='/notes/new'>Add Note</Link>\n    //         </div>\n    //     )\n    }\n}\nconst mapStateToProps = (state) => {\n    return{\n        notes:state.notes\n    }\n}\nexport default connect(mapStateToProps)(NoteList)"]},"metadata":{},"sourceType":"module"}