{"ast":null,"code":"var _jsxFileName = \"/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nclass NoteList extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePin = id => {\n      axios.put(\"http://localhost:3006/notes/\".concat(id), {\n        isPinned: true\n      }, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        const notes = this.state.notes.map(note => {\n          if (note._id === response.data._id) {\n            note.isPinned = response.data.isPinned;\n            return note;\n          } else {\n            return note;\n          }\n        });\n        this.setState(() => ({\n          notes\n        }));\n      });\n    };\n\n    this.handleUnPin = id => {\n      axios.put(\"http://localhost:3006/notes/\".concat(id), {\n        isPinned: false\n      }, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        const notes = this.state.notes.map(note => {\n          if (note._id === response.data._id) {\n            note.isPinned = response.data.isPinned;\n            return note;\n          } else {\n            return note;\n          }\n        });\n        this.setState(() => ({\n          notes\n        }));\n      });\n    };\n\n    this.handleCopy = note => {\n      let newNote;\n\n      if (note) {\n        newNote = {\n          title: note.title,\n          body: note.body,\n          category: note.category,\n          tags: note.tags.map(tag => ({\n            tag: tag.tag\n          })),\n          isPinned: note.isPinned\n        };\n      }\n\n      axios.post('http://localhost:3006/notes', newNote, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        console.log(response.data); // this.props.dispatch(setNote(response.data))\n\n        this.setState(prevState => ({\n          notes: [...prevState.notes, response.data]\n        }));\n      });\n    };\n\n    this.handleDelete = id => {\n      axios.delete(\"http://localhost:3006/notes/\".concat(id), {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        // this.props.dispatch(removeNote(response.data._id))\n        this.setState(prevState => ({\n          notes: prevState.notes.filter(note => note._id !== response.data._id)\n        }));\n      });\n    };\n\n    this.state = {\n      notes: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3006/notes', {\n      headers: {\n        'x-auth': localStorage.getItem('userAuthToken')\n      }\n    }).then(response => {\n      // this.props.dispatch(setNotes(response.data))\n      this.setState(() => ({\n        notes: response.data\n      }));\n    });\n  }\n\n  render() {\n    const pinNotes = this.state.notes.filter(note => note.isPinned === true);\n    const UnpinNotes = this.state.notes.filter(note => note.isPinned === false);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.notes.length !== 0 && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Listing notes   - \", this.props.notes.length), pinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"pinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, pinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleUnPin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Unpin\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleDelete(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"copy\")))), UnpinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"unpinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, UnpinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handlePin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"pin\"), React.createElement(\"button\", {\n      onClick: () => {\n        const confirmRemove = window.confirm('Are you sure?');\n\n        if (confirmRemove) {\n          this.handleDelete(note._id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"copy\")))), React.createElement(Link, {\n      to: \"/notes/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Add Note\"));\n  }\n\n} // const mapStateToProps = (state) => {\n//     return{\n//         notes:state.notes\n//     }\n// }\n\n\nexport default NoteList;","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js"],"names":["React","axios","Link","NoteList","Component","constructor","handlePin","id","put","isPinned","headers","localStorage","getItem","then","response","notes","state","map","note","_id","data","setState","handleUnPin","handleCopy","newNote","title","body","category","tags","tag","post","console","log","prevState","handleDelete","delete","filter","componentDidMount","get","render","pinNotes","UnpinNotes","length","props","confirmRemove","window","confirm"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\n\n\nclass NoteList extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            notes:[]\n        }\n    }\n    componentDidMount() {\n        axios.get('http://localhost:3006/notes', {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                // this.props.dispatch(setNotes(response.data))\n                this.setState(() => ({ notes: response.data }))\n            })\n    }\n    handlePin = (id)  => {\n        axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                        const notes = this.state.notes.map(note => {\n                            if (note._id === response.data._id) {\n                                note.isPinned = response.data.isPinned\n                                return note\n                            } else {\n                                return note\n                            }\n                        })\n                        this.setState(() => ({ notes }))\n                    })             \n    }\n    handleUnPin = (id) => {\n        axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                const notes=this.state.notes.map(note => {\n                     if (note._id === response.data._id) {\n                        note.isPinned = response.data.isPinned\n                        return note\n                    }else{\n                        return note\n                    }\n                })\n                this.setState(() => ({notes}))\n            })\n    }\n\n    handleCopy = (note) => {\n        let newNote\n        if(note){\n            newNote = {\n                title:note.title,\n                body:note.body,\n                category:note.category,\n                tags:note.tags.map(tag => ({tag:tag.tag})),\n                isPinned:note.isPinned\n            }\n        }\n        axios.post('http://localhost:3006/notes', newNote , {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            console.log(response.data)\n            // this.props.dispatch(setNote(response.data))\n            this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n        })\n    }\n    handleDelete = (id) => {\n        axios.delete(`http://localhost:3006/notes/${id}`, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            // this.props.dispatch(removeNote(response.data._id))\n            this.setState((prevState) => ({notes:prevState.notes.filter(note => note._id !== response.data._id)}))       \n        })\n    }\n    render() {\n        const pinNotes = this.state.notes.filter(note => note.isPinned === true)\n        const UnpinNotes = this.state.notes.filter(note => note.isPinned === false)\n        return(        \n            <div>\n                {this.state.notes.length !== 0 && (<h1>Listing notes   - {this.props.notes.length}</h1>)}\n\n                 {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n                 <ul>\n                     {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n                        this.handleDelete(note._id)\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                              </ul>\n\n                 {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n                 <ul>\n                    {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n                        const confirmRemove = window.confirm('Are you sure?')\n                        if(confirmRemove){\n                            this.handleDelete(note._id)\n                       }\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                </ul>\n\n                 <Link to='/notes/new'>Add Note</Link>\n             </div>\n        )\n    }\n}\n// const mapStateToProps = (state) => {\n//     return{\n//         notes:state.notes\n//     }\n// }\nexport default NoteList"]},"metadata":{},"sourceType":"module"}