{"ast":null,"code":"var _jsxFileName = \"/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getNote } from '../../actions/note';\n\nclass NoteList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handlePin = id => {\n      axios.put(\"http://localhost:3006/notes/\".concat(id), {\n        isPinned: true\n      }, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {// const notes = this.state.notes.map(note => {\n        //     if (note._id === response.data._id) {\n        //         note.isPinned = response.data.isPinned\n        //         return note\n        //     } else {\n        //         return note\n        //     }\n        // })\n        // this.setState(() => ({ notes }))\n      });\n    };\n\n    this.handleUnPin = id => {\n      axios.put(\"http://localhost:3006/notes/\".concat(id), {\n        isPinned: false\n      }, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        const notes = this.state.notes.map(note => {\n          if (note._id === response.data._id) {\n            note.isPinned = response.data.isPinned;\n            return note;\n          } else {\n            return note;\n          }\n        });\n        console.log(notes);\n        this.setState(() => ({\n          notes\n        }));\n      });\n    };\n\n    this.handleCopy = note => {\n      let newNote;\n\n      if (note) {\n        newNote = {\n          title: note.title,\n          body: note.body,\n          category: note.category,\n          tags: note.tags.map(tag => ({\n            tag: tag.tag\n          })),\n          isPinned: note.isPinned\n        };\n      }\n\n      axios.post('http://localhost:3006/notes', newNote, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        console.log(response.data);\n        this.setState(prevState => ({\n          notes: [...prevState.notes, response.data]\n        }));\n      });\n    };\n\n    this.handleDelete = id => {\n      axios.delete(\"http://localhost:3006/notes/\".concat(id), {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        // const note= this.state.notes.find(noteItem => noteItem._id === id)\n        // const index = this.state.notes.indexOf(note)\n        // this.state.notes.splice(index,1)\n        this.setState(prevState => ({\n          notes: prevState.notes.filter(note => note._id !== id)\n        }));\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3006/notes', {\n      headers: {\n        'x-auth': localStorage.getItem('userAuthToken')\n      }\n    }).then(response => {\n      console.log(this.props);\n      this.props.dispatch(setNotes(response.data)); // this.setState(() => ({ notes: response.data }))\n    });\n  }\n\n  render() {\n    const pinNotes = this.props.notes.filter(note => note.isPinned === true);\n    const UnpinNotes = this.props.notes.filter(note => note.isPinned === false);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.props.notes.length !== 0 && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Listing notes   - \", this.state.notes.length), pinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"pinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, pinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleUnPin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Unpin\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleDelete(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"copy\")))), UnpinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"unpinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, UnpinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handlePin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"pin\"), React.createElement(\"button\", {\n      onClick: () => {\n        const confirmRemove = window.confirm('Are you sure?');\n\n        if (confirmRemove) {\n          this.handleDelete(note._id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"copy\")))), React.createElement(Link, {\n      to: \"/notes/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Add Note\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notes: state.notes\n  };\n};\n\nexport default connect(mapStateToProps)(NoteList);","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js"],"names":["React","axios","Link","connect","getNote","NoteList","Component","handlePin","id","put","isPinned","headers","localStorage","getItem","then","response","handleUnPin","notes","state","map","note","_id","data","console","log","setState","handleCopy","newNote","title","body","category","tags","tag","post","prevState","handleDelete","delete","filter","componentDidMount","get","props","dispatch","setNotes","render","pinNotes","UnpinNotes","length","confirmRemove","window","confirm","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nimport { getNote } from '../../actions/note'\n\nclass NoteList extends React.Component {\n\n    componentDidMount() {\n        axios.get('http://localhost:3006/notes', {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                console.log(this.props)\n                this.props.dispatch(setNotes(response.data))\n                // this.setState(() => ({ notes: response.data }))\n            })\n    }\n    handlePin = (id) => {\n        axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                        // const notes = this.state.notes.map(note => {\n                        //     if (note._id === response.data._id) {\n                        //         note.isPinned = response.data.isPinned\n                        //         return note\n                        //     } else {\n                        //         return note\n                        //     }\n                        // })\n                        // this.setState(() => ({ notes }))\n                    })             \n    }\n    handleUnPin = (id) => {\n        axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                const notes=this.state.notes.map(note => {\n                     if (note._id === response.data._id) {\n                        note.isPinned = response.data.isPinned\n                        return note\n                    }else{\n                        return note\n                    }\n                })\n                console.log(notes)\n                this.setState(() => ({notes}))\n            })\n    }\n\n    handleCopy = (note) => {\n        let newNote\n        if(note){\n            newNote = {\n                title:note.title,\n                body:note.body,\n                category:note.category,\n                tags:note.tags.map(tag => ({tag:tag.tag})),\n                isPinned:note.isPinned\n            }\n        }\n        axios.post('http://localhost:3006/notes', newNote , {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            console.log(response.data)\n            this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n        })\n    }\n    handleDelete = (id) => {\n        axios.delete(`http://localhost:3006/notes/${id}`, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            // const note= this.state.notes.find(noteItem => noteItem._id === id)\n            // const index = this.state.notes.indexOf(note)\n            // this.state.notes.splice(index,1)\n            this.setState((prevState) => ({notes:prevState.notes.filter(note => note._id !== id)}))\n        })\n    }\n    render() {\n        const pinNotes = this.props.notes.filter(note => note.isPinned === true)\n        const UnpinNotes = this.props.notes.filter(note => note.isPinned === false)\n        return (\n            <div>\n                {this.props.notes.length !== 0 && (<h1>Listing notes   - {this.state.notes.length}</h1>)}\n                \n                {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n                <ul>\n                    {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n                        this.handleDelete(note._id)\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                </ul>\n\n                {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n                <ul>\n                    {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n                        const confirmRemove = window.confirm('Are you sure?')\n                        if(confirmRemove){\n                            this.handleDelete(note._id)\n                        }\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                </ul>\n                \n                <Link to='/notes/new'>Add Note</Link>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return{\n        notes:state.notes\n    }\n}\nexport default connect(mapStateToProps)(NoteList)"]},"metadata":{},"sourceType":"module"}