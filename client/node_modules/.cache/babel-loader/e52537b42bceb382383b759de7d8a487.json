{"ast":null,"code":"const reducerInitialNotes = [];\n\nconst NotesReducer = (state = reducerInitialNotes, action) => {\n  switch (action.type) {\n    case 'SET_NOTES':\n      {\n        return state.concat(action.payload);\n      }\n\n    case 'REMOVE_NOTE':\n      {\n        return state.filter(note => note._id !== action.payload);\n      }\n\n    case 'GET_NOTES':\n      {\n        return [...state];\n      }\n\n    case 'CHANGE_NOTE_ISPINNED':\n      {\n        const notes = state.map(note => {\n          if (note._id === action.payload._id) {\n            note.isPinned = action.payload.isPinned;\n            return note;\n          } else {\n            return note;\n          }\n        });\n        return notes;\n      }\n\n    case 'SET_NOTES':\n      {\n        return [...state, action.payload];\n      }\n\n    default:\n      {\n        return [...state];\n      }\n  }\n};\n\nexport default NotesReducer;","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/reducers/notes.js"],"names":["reducerInitialNotes","NotesReducer","state","action","type","concat","payload","filter","note","_id","notes","map","isPinned"],"mappings":"AACA,MAAMA,mBAAmB,GAAG,EAA5B;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAACF,mBAAP,EAA4BG,MAA5B,KAAuC;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AAAiB;AACb,eAAOF,KAAK,CAACG,MAAN,CAAaF,MAAM,CAACG,OAApB,CAAP;AACH;;AACD,SAAK,aAAL;AAAmB;AACf,eAAOJ,KAAK,CAACK,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,MAAM,CAACG,OAAzC,CAAP;AACH;;AACA,SAAK,WAAL;AAAkB;AACf,eAAO,CAAC,GAAGJ,KAAJ,CAAP;AACH;;AACD,SAAK,sBAAL;AAA4B;AACxB,cAAMQ,KAAK,GAAGR,KAAK,CAACS,GAAN,CAAUH,IAAI,IAAI;AAC5B,cAAGA,IAAI,CAACC,GAAL,KAAaN,MAAM,CAACG,OAAP,CAAeG,GAA/B,EAAmC;AAC/BD,YAAAA,IAAI,CAACI,QAAL,GAAgBT,MAAM,CAACG,OAAP,CAAeM,QAA/B;AACA,mBAAOJ,IAAP;AACH,WAHD,MAGK;AACD,mBAAOA,IAAP;AACH;AACJ,SAPa,CAAd;AAQI,eAAOE,KAAP;AACP;;AACD,SAAK,WAAL;AAAmB;AACf,eAAO,CAAC,GAAGR,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAP;AACH;;AACD;AAAU;AACN,eAAM,CAAC,GAAGJ,KAAJ,CAAN;AACH;AA1BL;AA4BP,CA7BD;;AA8BA,eAAeD,YAAf","sourcesContent":["\nconst reducerInitialNotes = []\nconst NotesReducer = (state=reducerInitialNotes, action) => {\n        switch(action.type){\n            case 'SET_NOTES':{\n                return state.concat(action.payload)\n            }\n            case 'REMOVE_NOTE':{\n                return state.filter(note => note._id !== action.payload)\n            }\n             case 'GET_NOTES': {\n                return [...state]\n            }\n            case 'CHANGE_NOTE_ISPINNED':{\n                const notes = state.map(note => {\n                    if(note._id === action.payload._id){\n                        note.isPinned = action.payload.isPinned\n                        return note\n                    }else{\n                        return note\n                    }\n                })\n                    return notes\n            }\n            case 'SET_NOTES' : {\n                return [...state, action.payload]\n            }\n            default : {\n                return[...state]\n            }\n        }\n}\nexport default NotesReducer"]},"metadata":{},"sourceType":"module"}