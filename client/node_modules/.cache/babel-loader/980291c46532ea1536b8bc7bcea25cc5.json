{"ast":null,"code":"var _jsxFileName = \"/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setNotes } from '../../actions/note';\nimport { removeNote } from '../../actions/note';\nimport { setNote } from '../../actions/note';\n\nclass NoteList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleCopy = note => {\n      let newNote;\n\n      if (note) {\n        newNote = {\n          title: note.title,\n          body: note.body,\n          category: note.category,\n          tags: note.tags.map(tag => ({\n            tag: tag.tag\n          })),\n          isPinned: note.isPinned\n        };\n      }\n\n      axios.post('http://localhost:3006/notes', newNote, {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        console.log(response.data);\n        this.props.dispatch(setNote(response.data)); // this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n      });\n    };\n\n    this.handleDelete = id => {\n      axios.delete(\"http://localhost:3006/notes/\".concat(id), {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        this.props.dispatch(removeNote(response.data._id));\n      });\n    };\n  }\n\n  // constructor(props) {\n  //     super(props)\n  //     this.state = {\n  //         notes: [],\n  //     }\n  //     // this.handlePin=this.handlePin.bind(this)\n  //     // this.handleUnPin = this.handleUnPin.bind(this)\n  //     // this.handleCopy=this.handleCopy.bind(this)\n  //     // this.handleDelete=this.handleDelete.bind(this)\n  // }\n  componentDidMount() {\n    axios.get('http://localhost:3006/notes', {\n      headers: {\n        'x-auth': localStorage.getItem('userAuthToken')\n      }\n    }).then(response => {\n      this.props.dispatch(setNotes(response.data)); // this.setState(() => ({ notes: response.data }))\n    });\n  } // handlePin = (id)  => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //                     const notes = this.state.notes.map(note => {\n  //                         if (note._id === response.data._id) {\n  //                             note.isPinned = response.data.isPinned\n  //                             return note\n  //                         } else {\n  //                             return note\n  //                         }\n  //                     })\n  //                     this.setState(() => ({ notes }))\n  //                 })             \n  // }\n  // handleUnPin = (id) => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //             const notes=this.state.notes.map(note => {\n  //                  if (note._id === response.data._id) {\n  //                     note.isPinned = response.data.isPinned\n  //                     return note\n  //                 }else{\n  //                     return note\n  //                 }\n  //             })\n  //             console.log(notes)\n  //             this.setState(() => ({notes}))\n  //         })\n  // }\n\n\n  render() {\n    console.log(this.props);\n    const pinNotes = this.props.notes.filter(note => note.isPinned === true);\n    const UnpinNotes = this.props.notes.filter(note => note.isPinned === false);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.props.notes.length !== 0 && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Listing notes   - \", this.props.notes.length), pinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"pinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, pinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleUnPin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Unpin\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleDelete(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"copy\")))), UnpinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"unpinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, UnpinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handlePin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"pin\"), React.createElement(\"button\", {\n      onClick: () => {\n        const confirmRemove = window.confirm('Are you sure?');\n\n        if (confirmRemove) {\n          this.handleDelete(note._id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"copy\")))), React.createElement(Link, {\n      to: \"/notes/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Add Note\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notes: state.notes\n  };\n};\n\nexport default connect(mapStateToProps)(NoteList);","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js"],"names":["React","axios","Link","connect","setNotes","removeNote","setNote","NoteList","Component","handleCopy","note","newNote","title","body","category","tags","map","tag","isPinned","post","headers","localStorage","getItem","then","response","console","log","data","props","dispatch","handleDelete","id","delete","_id","componentDidMount","get","render","pinNotes","notes","filter","UnpinNotes","length","handleUnPin","handlePin","confirmRemove","window","confirm","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;;AACA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SA4DnCC,UA5DmC,GA4DrBC,IAAD,IAAU;AACnB,UAAIC,OAAJ;;AACA,UAAGD,IAAH,EAAQ;AACJC,QAAAA,OAAO,GAAG;AACNC,UAAAA,KAAK,EAACF,IAAI,CAACE,KADL;AAENC,UAAAA,IAAI,EAACH,IAAI,CAACG,IAFJ;AAGNC,UAAAA,QAAQ,EAACJ,IAAI,CAACI,QAHR;AAINC,UAAAA,IAAI,EAACL,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAcC,GAAG,KAAK;AAACA,YAAAA,GAAG,EAACA,GAAG,CAACA;AAAT,WAAL,CAAjB,CAJC;AAKNC,UAAAA,QAAQ,EAACR,IAAI,CAACQ;AALR,SAAV;AAOH;;AACDjB,MAAAA,KAAK,CAACkB,IAAN,CAAW,6BAAX,EAA0CR,OAA1C,EAAoD;AAChDS,QAAAA,OAAO,EAAE;AACL,oBAAUC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADL;AADuC,OAApD,EAKCC,IALD,CAKMC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,aAAKC,KAAL,CAAWC,QAAX,CAAoBvB,OAAO,CAACkB,QAAQ,CAACG,IAAV,CAA3B,EAFc,CAGd;AACH,OATD;AAUH,KAjFkC;;AAAA,SAkFnCG,YAlFmC,GAkFnBC,EAAD,IAAQ;AACnB9B,MAAAA,KAAK,CAAC+B,MAAN,uCAA4CD,EAA5C,GAAkD;AAC9CX,QAAAA,OAAO,EAAE;AACL,oBAAUC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADL;AADqC,OAAlD,EAKCC,IALD,CAKMC,QAAQ,IAAI;AACd,aAAKI,KAAL,CAAWC,QAAX,CAAoBxB,UAAU,CAACmB,QAAQ,CAACG,IAAT,CAAcM,GAAf,CAA9B;AACH,OAPD;AAQH,KA3FkC;AAAA;;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAChBjC,IAAAA,KAAK,CAACkC,GAAN,CAAU,6BAAV,EAAyC;AACrCf,MAAAA,OAAO,EAAE;AACL,kBAAUC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADL;AAD4B,KAAzC,EAKKC,IALL,CAKUC,QAAQ,IAAI;AACd,WAAKI,KAAL,CAAWC,QAAX,CAAoBzB,QAAQ,CAACoB,QAAQ,CAACG,IAAV,CAA5B,EADc,CAEd;AACH,KARL;AASH,GArBkC,CAsBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAkCAS,EAAAA,MAAM,GAAG;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAjB;AACA,UAAMS,QAAQ,GAAG,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwB7B,IAAI,IAAIA,IAAI,CAACQ,QAAL,KAAkB,IAAlD,CAAjB;AACA,UAAMsB,UAAU,GAAG,KAAKZ,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwB7B,IAAI,IAAIA,IAAI,CAACQ,QAAL,KAAkB,KAAlD,CAAnB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKU,KAAL,CAAWU,KAAX,CAAiBG,MAAjB,KAA4B,CAA5B,IAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAuB,KAAKb,KAAL,CAAWU,KAAX,CAAiBG,MAAxC,CADvC,EAGMJ,QAAQ,CAACI,MAAT,KAAoB,CAApB,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAN,CAHhC,EAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKJ,QAAQ,CAACrB,GAAT,CAAaN,IAAI,IAAI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACuB,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB,oBAAC,IAAD;AAAM,MAAA,EAAE,mBAAYvB,IAAI,CAACuB,GAAjB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCvB,IAAI,CAACE,KAAtC,CAAnB,EAAsE;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAE,aAAK8B,WAAL,CAAiBhC,IAAI,CAACuB,GAAtB;AAA4B,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtE,EAA2I;AAAQ,MAAA,OAAO,EAAE,MAAM;AACrL,aAAKH,YAAL,CAAkBpB,IAAI,CAACuB,GAAvB;AACH,OAFiK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3I,EAEL;AAAQ,MAAA,OAAO,EAAE,MAAM;AACrC,aAAKxB,UAAL,CAAgBC,IAAhB;AAAsB,OADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFK,CAArB,CADL,CAJL,EAWM8B,UAAU,CAACC,MAAX,KAAsB,CAAtB,IAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAN,CAXlC,EAYK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACID,UAAU,CAACxB,GAAX,CAAeN,IAAI,IAAI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACuB,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB,oBAAC,IAAD;AAAM,MAAA,EAAE,mBAAYvB,IAAI,CAACuB,GAAjB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCvB,IAAI,CAACE,KAAtC,CAAnB,EAAsE;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAE,aAAK+B,SAAL,CAAejC,IAAI,CAACuB,GAApB;AAA0B,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAtE,EAAuI;AAAQ,MAAA,OAAO,EAAE,MAAM;AAClL,cAAMW,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAe,eAAf,CAAtB;;AACA,YAAGF,aAAH,EAAiB;AACb,eAAKd,YAAL,CAAkBpB,IAAI,CAACuB,GAAvB;AACJ;AACH,OAL8J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvI,EAKN;AAAQ,MAAA,OAAO,EAAE,MAAM;AACrC,aAAKxB,UAAL,CAAgBC,IAAhB;AAAsB,OADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALM,CAAvB,CADJ,CAZL,EAsBK,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAtBL,CADJ;AA0BH;;AA1HkC;;AA4HvC,MAAMqC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAM;AACFV,IAAAA,KAAK,EAACU,KAAK,CAACV;AADV,GAAN;AAGH,CAJD;;AAKA,eAAenC,OAAO,CAAC4C,eAAD,CAAP,CAAyBxC,QAAzB,CAAf","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nimport {setNotes} from '../../actions/note'\nimport { removeNote } from '../../actions/note'\nimport {setNote} from '../../actions/note'\nclass NoteList extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         notes: [],\n    //     }\n    //     // this.handlePin=this.handlePin.bind(this)\n    //     // this.handleUnPin = this.handleUnPin.bind(this)\n    //     // this.handleCopy=this.handleCopy.bind(this)\n    //     // this.handleDelete=this.handleDelete.bind(this)\n    // }\n    componentDidMount() {\n        axios.get('http://localhost:3006/notes', {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                this.props.dispatch(setNotes(response.data))\n                // this.setState(() => ({ notes: response.data }))\n            })\n    }\n    // handlePin = (id)  => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //                     const notes = this.state.notes.map(note => {\n    //                         if (note._id === response.data._id) {\n    //                             note.isPinned = response.data.isPinned\n    //                             return note\n    //                         } else {\n    //                             return note\n    //                         }\n    //                     })\n    //                     this.setState(() => ({ notes }))\n    //                 })             \n    // }\n    // handleUnPin = (id) => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //             const notes=this.state.notes.map(note => {\n    //                  if (note._id === response.data._id) {\n    //                     note.isPinned = response.data.isPinned\n    //                     return note\n    //                 }else{\n    //                     return note\n    //                 }\n    //             })\n    //             console.log(notes)\n    //             this.setState(() => ({notes}))\n    //         })\n    // }\n\n    handleCopy = (note) => {\n        let newNote\n        if(note){\n            newNote = {\n                title:note.title,\n                body:note.body,\n                category:note.category,\n                tags:note.tags.map(tag => ({tag:tag.tag})),\n                isPinned:note.isPinned\n            }\n        }\n        axios.post('http://localhost:3006/notes', newNote , {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            console.log(response.data)\n            this.props.dispatch(setNote(response.data))\n            // this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n        })\n    }\n    handleDelete = (id) => {\n        axios.delete(`http://localhost:3006/notes/${id}`, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            this.props.dispatch(removeNote(response.data._id))          \n        })\n    }\n    render() {\n        console.log(this.props)\n        const pinNotes = this.props.notes.filter(note => note.isPinned === true)\n        const UnpinNotes = this.props.notes.filter(note => note.isPinned === false)\n        return(        \n            <div>\n                {this.props.notes.length !== 0 && (<h1>Listing notes   - {this.props.notes.length}</h1>)}\n\n                 {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n                 <ul>\n                     {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n                        this.handleDelete(note._id)\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                              </ul>\n\n                 {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n                 <ul>\n                    {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n                        const confirmRemove = window.confirm('Are you sure?')\n                        if(confirmRemove){\n                            this.handleDelete(note._id)\n                       }\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                </ul>\n\n                 <Link to='/notes/new'>Add Note</Link>\n             </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return{\n        notes:state.notes\n    }\n}\nexport default connect(mapStateToProps)(NoteList)"]},"metadata":{},"sourceType":"module"}