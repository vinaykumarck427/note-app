{"ast":null,"code":"var _jsxFileName = \"/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setNotes } from '../../actions/note';\nimport { removeNote } from '../../actions/note';\nimport configureStore from '../../store/configureStore';\nconst store = configureStore();\n\nclass NoteList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleDelete = id => {\n      axios.delete(\"http://localhost:3006/notes/\".concat(id), {\n        headers: {\n          'x-auth': localStorage.getItem('userAuthToken')\n        }\n      }).then(response => {\n        this.props.dispatch(removeNote(response.data._id));\n      });\n    };\n  }\n\n  // constructor(props) {\n  //     super(props)\n  //     this.state = {\n  //         notes: [],\n  //     }\n  //     // this.handlePin=this.handlePin.bind(this)\n  //     // this.handleUnPin = this.handleUnPin.bind(this)\n  //     // this.handleCopy=this.handleCopy.bind(this)\n  //     // this.handleDelete=this.handleDelete.bind(this)\n  // }\n  componentDidMount() {\n    axios.get('http://localhost:3006/notes', {\n      headers: {\n        'x-auth': localStorage.getItem('userAuthToken')\n      }\n    }).then(response => {\n      this.props.dispatch(setNotes(response.data)); // this.setState(() => ({ notes: response.data }))\n    });\n  } // handlePin = (id)  => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //                     const notes = this.state.notes.map(note => {\n  //                         if (note._id === response.data._id) {\n  //                             note.isPinned = response.data.isPinned\n  //                             return note\n  //                         } else {\n  //                             return note\n  //                         }\n  //                     })\n  //                     this.setState(() => ({ notes }))\n  //                 })             \n  // }\n  // handleUnPin = (id) => {\n  //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //         .then(response => {\n  //             const notes=this.state.notes.map(note => {\n  //                  if (note._id === response.data._id) {\n  //                     note.isPinned = response.data.isPinned\n  //                     return note\n  //                 }else{\n  //                     return note\n  //                 }\n  //             })\n  //             console.log(notes)\n  //             this.setState(() => ({notes}))\n  //         })\n  // }\n  // handleCopy = (note) => {\n  //     let newNote\n  //     if(note){\n  //         newNote = {\n  //             title:note.title,\n  //             body:note.body,\n  //             category:note.category,\n  //             tags:note.tags.map(tag => ({tag:tag.tag})),\n  //             isPinned:note.isPinned\n  //         }\n  //     }\n  //     axios.post('http://localhost:3006/notes', newNote , {\n  //         headers: {\n  //             'x-auth': localStorage.getItem('userAuthToken')\n  //         }\n  //     })\n  //     .then(response => {\n  //         console.log(response.data)\n  //         this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n  //     })\n  // }\n\n\n  render() {\n    console.log(this.props);\n    console.log(store.getState().notes);\n    const pinNotes = this.props.notes.filter(note => note.isPinned === true);\n    const UnpinNotes = this.props.notes.filter(note => note.isPinned === false);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.props.notes.length !== 0 && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Listing notes   - \", this.props.notes.length), pinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"pinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, pinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleUnPin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Unpin\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleDelete(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"copy\")))), UnpinNotes.length !== 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"unpinned list\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, UnpinNotes.map(note => React.createElement(\"li\", {\n      key: note._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/notes/\".concat(note._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, note.title), React.createElement(\"button\", {\n      onClick: () => {\n        this.handlePin(note._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"pin\"), React.createElement(\"button\", {\n      onClick: () => {\n        const confirmRemove = window.confirm('Are you sure?');\n\n        if (confirmRemove) {\n          this.handleDelete(note._id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"delete\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleCopy(note);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"copy\")))), React.createElement(Link, {\n      to: \"/notes/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Add Note\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notes: state.notes\n  };\n};\n\nexport default connect(mapStateToProps)(NoteList);","map":{"version":3,"sources":["/home/vinay/feb-mern-fs/node-express/note-app/client/src/component/notes/List.js"],"names":["React","axios","Link","connect","setNotes","removeNote","configureStore","store","NoteList","Component","handleDelete","id","delete","headers","localStorage","getItem","then","response","props","dispatch","data","_id","componentDidMount","get","render","console","log","getState","notes","pinNotes","filter","note","isPinned","UnpinNotes","length","map","title","handleUnPin","handleCopy","handlePin","confirmRemove","window","confirm","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {setNotes} from '../../actions/note'\nimport { removeNote } from '../../actions/note'\nimport configureStore from '../../store/configureStore'\n\nconst store = configureStore()\nclass NoteList extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         notes: [],\n    //     }\n    //     // this.handlePin=this.handlePin.bind(this)\n    //     // this.handleUnPin = this.handleUnPin.bind(this)\n    //     // this.handleCopy=this.handleCopy.bind(this)\n    //     // this.handleDelete=this.handleDelete.bind(this)\n    // }\n    componentDidMount() {\n        axios.get('http://localhost:3006/notes', {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n            .then(response => {\n                this.props.dispatch(setNotes(response.data))\n                // this.setState(() => ({ notes: response.data }))\n            })\n    }\n    // handlePin = (id)  => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: true }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //                     const notes = this.state.notes.map(note => {\n    //                         if (note._id === response.data._id) {\n    //                             note.isPinned = response.data.isPinned\n    //                             return note\n    //                         } else {\n    //                             return note\n    //                         }\n    //                     })\n    //                     this.setState(() => ({ notes }))\n    //                 })             \n    // }\n    // handleUnPin = (id) => {\n    //     axios.put(`http://localhost:3006/notes/${id}`, { isPinned: false }, {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //         .then(response => {\n    //             const notes=this.state.notes.map(note => {\n    //                  if (note._id === response.data._id) {\n    //                     note.isPinned = response.data.isPinned\n    //                     return note\n    //                 }else{\n    //                     return note\n    //                 }\n    //             })\n    //             console.log(notes)\n    //             this.setState(() => ({notes}))\n    //         })\n    // }\n\n    // handleCopy = (note) => {\n    //     let newNote\n    //     if(note){\n    //         newNote = {\n    //             title:note.title,\n    //             body:note.body,\n    //             category:note.category,\n    //             tags:note.tags.map(tag => ({tag:tag.tag})),\n    //             isPinned:note.isPinned\n    //         }\n    //     }\n    //     axios.post('http://localhost:3006/notes', newNote , {\n    //         headers: {\n    //             'x-auth': localStorage.getItem('userAuthToken')\n    //         }\n    //     })\n    //     .then(response => {\n    //         console.log(response.data)\n    //         this.setState((prevState) => ({notes:[...prevState.notes,response.data]}))\n    //     })\n    // }\n    handleDelete = (id) => {\n        axios.delete(`http://localhost:3006/notes/${id}`, {\n            headers: {\n                'x-auth': localStorage.getItem('userAuthToken')\n            }\n        })\n        .then(response => {\n            this.props.dispatch(removeNote(response.data._id))          \n        })\n    }\n    render() {\n        console.log(this.props)\n        console.log(store.getState().notes)\n        const pinNotes = this.props.notes.filter(note => note.isPinned === true)\n        const UnpinNotes = this.props.notes.filter(note => note.isPinned === false)\n        return(        \n            <div>\n                {this.props.notes.length !== 0 && (<h1>Listing notes   - {this.props.notes.length}</h1>)}\n\n                 {pinNotes.length !== 0 && (<span><h2>pinned list</h2></span>)}\n                 <ul>\n                     {pinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handleUnPin(note._id) }}>Unpin</button><button onClick={() => {\n                        this.handleDelete(note._id)\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                              </ul>\n\n                 {UnpinNotes.length !== 0 && (<span><h2>unpinned list</h2></span>)}\n                 <ul>\n                    {UnpinNotes.map(note => <li key={note._id}><Link to={`/notes/${note._id}`}>{note.title}</Link><button onClick={() => { this.handlePin(note._id) }}>pin</button><button onClick={() => {\n                        const confirmRemove = window.confirm('Are you sure?')\n                        if(confirmRemove){\n                            this.handleDelete(note._id)\n                       }\n                    }}>delete</button><button onClick={() => {\n                        this.handleCopy(note)}}>copy</button></li>)}\n                </ul>\n\n                 <Link to='/notes/new'>Add Note</Link>\n             </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return{\n        notes:state.notes\n    }\n}\nexport default connect(mapStateToProps)(NoteList)"]},"metadata":{},"sourceType":"module"}